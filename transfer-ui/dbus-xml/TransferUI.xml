
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
    "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<node name="/com/meego/transferui">
    <interface name="com.meego.transferui">

        <!--
        Method transferExists
        Check whether the transfer with a given id already exists in the TUI
        database.
        Parameters:
        IN:
            id: Transfer UI id of the transfer
        OUT:
            exists : Boolean value true if the transfer exists in TUI and false
            otherwise
        -->
        <method name="transferExists">
            <arg name="id" type="s" direction="in"/>
            <arg name="exists" type="b" direction="out"/>
        </method>

        <!--
        Method "registerTransientTransfer":
        Tell Transfer UI to start follow new transfer . Will return id that is
        then used to control presentation of this transfer in UI.
        After registering the tranfer, client should provide
            1. Service/Account name for the transfer , if any
            2. Total no of files in the transfer
            3. Type of the transfer (refer TransferEnums.h)
            4. Thumbnail path / Service Icon for the transfer
            5. Name of the transfer
            6. Total Size in bytes
            7. State of the transfer
        Parameters:
        IN:
            transferId: Transfer id of transfer
        OUT:
            id: Transfer UI id of transfer. Empty string if transfer can't be
                found from tracker.
        -->
        <method name="registerTransientTransfer">
            <arg name="transferId" type="s" direction="in"/>
            <arg name="id" type="s" direction="out"/>
        </method>

        <!--
        Method "registerTransientTransfer":
        Inform Transfer UI to register a new transfer. This function registers a
        transfer which doesn't uses tracker. A unique identifier is formed by
        Transfer UI and returned as Id. Id is used to control presentation
        of the transfer registered in UI. This is the convience method provided.
        If tui crash and restarts, tuiLaunched signal is emitted. libtuiclient
        re-populates the transfers with the same transfer id.
        After registering the tranfer, client should provide
            1. Service/Account name for the transfer , if any
            2. Total no of files in the transfer
            3. Type of the transfer (refer TransferEnums.h)
            4. Thumbnail path / Service Icon for the transfer
            5. Name of the transfer
            6. Total Size in bytes
            7. State of the transfer
        Parameters:
        OUT:
            id: Transfer UI id of transfer.
        -->
        <method name="registerTransientTransfer">
            <arg name="id" type="s" direction="out"/>
        </method>

        <!--
        Method "registerTransientTransfer"
        Inform Transfer UI to register a new transfer. This function registers a
        transfer which doesn't uses tracker. A unique identifier is generated by
        Transfer UI and returned as Id. Id is used to control presentation of
        the transfer registered in UI.
        The Transfer details other than title and type will be set to default
        values.
        Size will be set to zero
        Total file count will be set to 1
        Transfer State will be set to pending without any message
        Thumbnail is set to default thumbnail
        TargetName will be set to Null.
        Parameters:
        IN:
            name : Transfer Name , which will be presented to the user
            type  : Type of the transfer (refer TransferEnums.h)
        OUT:
            id: Transfer UI id of transfer
        -->
        <method name="registerTransientTransfer">
            <arg name="name" type="s" direction="in" />
            <arg name="type" type="i" direction="in" />
            <arg name="id" type="s" direction="out"/>
        </method>

        <!--
        Method "registerTransientTransfer"
        Inform Transfer UI to register a new transfer. This function registers a
        transfer which doesn't uses tracker. A unique identifier is generated by
        Transfer UI and returned as Id. Id is used to control presentation of
        the transfer registered in UI.
        The Transfer details other than title and type will be set to default
        values.
        Size will be set to zero
        Total file count will be set to 1
        Transfer State will be set to pending without any message
        Thumbnail is set to default thumbnail
        TargetName will be set to Null.
        Parameters:
        IN:
            name : Transfer Name , which will be presented to the user
            type  : Type of the transfer (refer TransferEnums.h)
        OUT:
            id: Transfer UI id of transfer
        -->
        <method name="registerTransientTransfer">
            <arg name="name" type="s" direction="in" />
            <arg name="type" type="i" direction="in" />
			<arg name="clientId" type="s" direction="in"/>
            <arg name="id" type="s" direction="out"/>
        </method>


        <!--
        Method to update the current file status.
        Parameters:
        IN:
          id: Transfer UI id of transfer
          title: Localized string shown as a name of transfer
          thumbnail : thumbnail file path for the current file
          fileIndex : current file index
        -->
        <method name="updateCurrentFileInfo">
            <arg name="id" type="s" direction="in"/>
            <arg name="title" type="s" direction="in" />
            <arg name="thumbnail" type="s" direction="in" />
            <arg name="fileIndex" type="i" direction="in" />
        </method>

        <!--
        Method "setProgress":
        Update progress bar of transfer
        Parameters:
        IN:
            id: Transfer UI id of transfer
            done: how much of transfer is done [0.0 .. 1.0]
        -->
        <method name="setProgress">
            <arg name="id" type="s" direction="in"/>
            <arg name="done" type="d" direction="in"/>
        </method>

        <!--
        Method "setEstimate":
        Set new estimate when transfer is done
        Parameters:
        IN:
            id: Transfer UI id of transfer
            seconds: How many seconds it will take to finish transfer. 0 or less
                     will tell that estimate can be calculated.
        -->
        <method name="setEstimate">
            <arg name="id" type="s" direction="in"/>
            <arg name="seconds" type="i" direction="in"/>
        </method>

        <!--
        Method "setSize":
        Define bytes transfered in transfer / size of transfer
        Parameters:
        IN:
            id: Transfer UI id of transfer
            bytes: How many bytes is transfered in transfer. 0 will tell that
                   total amount of bytes moved is unknown.
        -->
        <method name="setSize">
            <arg name="id" type="s" direction="in"/>
            <arg name="bytes" type="t" direction="in"/>
        </method>

        <!--
        Method "setName":
        Define name for transfer. Name is used if files related to transfer
        can't resolved.
        Parameters:
        IN:
            id: Transfer UI id of transfer
            name: Localized string shown as a name of transfer
        -->
        <method name="setName">
            <arg name="id" type="s" direction="in"/>
            <arg name="name" type="s" direction="in"/>
        </method>

        <!--
        Method "setMessage":
        Define message that is shown with transfers that are not in active
        state (pending and failed transfers).
        Parameters:
        IN:
            id: Transfer UI id of transfer
            message: Localized string shown as a status message of transfer
        -->
        <method name="setMessage">
            <arg name="id" type="s" direction="in"/>
            <arg name="message" type="s" direction="in"/>
        </method>

        <!--
        Method "setTargetName":
        Define Target name for the transfer. This string will be displayed along
        with transfer title
        Eg. In case of upload , target name will be service name for which files
        are uploaded. In case of bt transfer it may be target phone name.
        Parameters:
        IN:
            id: Transfer UI id of transfer
            targetName: target name
        -->
        <method name="setTargetName">
            <arg name="id" type="s" direction="in"/>
            <arg name="targetName" type="s" direction="in"/>
        </method>

        <!--
        Method "setFilesCount":
        Define total No of files, this method will be usefull when the transfer
        is non tracker based transfer. The default value will be set to 1, if
        this function is not called.
        Parameters:
        IN:
            id: Transfer UI id of transfer
            count: Total No of files in the transfer list
        -->
        <method name="setFilesCount">
            <arg name="id" type="s" direction="in"/>
            <arg name="count" type="i" direction="in"/>
        </method>


        <!--
        Method "setCurrentFileIndex":
        Define no of files transfered, this method will be usefull when the
        transfer is non tracker based transfer. This is applicable for multifile
        transfer.
        Parameters:
        IN:
            id: Transfer UI id of transfer
            fileIndex: Index of file currently being sent
        -->
        <method name="setCurrentFileIndex">
            <arg name="id" type="s" direction="in"/>
            <arg name="fileIndex" type="i" direction="in"/>
        </method>

        <!--
        Method "setThumbnailPath":
        Define the thumbnail image path, this method will be usefull when the
        transfer is non tracker based transfer.
        Parameters:
        IN:
            id: Transfer UI id of transfer.
            path: Absolute path of the thumbnail image.
        -->
        <method name="setThumbnailPath">
            <arg name="id" type="s" direction="in"/>
            <arg name="path" type="s" direction="in"/>
        </method>

        <!--
        Deprecated use setIcon
        Method "setFileTypeIcon":
        Define the icon of the file type. Icon will be displayed for the given
        icon id for the transfer. If there are no thumbnails for the transfer,
        this method can be used to set the icon of the file type.
        Parameters:
        IN:
            id: Transfer UI id of transfer
            iconId: Icon Id for the given transfer
        -->
        <method name="setFileTypeIcon">
            <arg name="id" type="s" direction="in"/>
            <arg name="iconId" type="s" direction="in"/>
        </method>

        <!--
        Method "setIcon":
        Define the icon of the file type. Icon will be displayed for the given
        icon id for the transfer. If there are no thumbnails for the transfer,
        this method can be used to set the icon of the file type.This function
        igonres any previous requests made to show thumbnail using
        setThumbnailForFile.
          function.
        Parameters:
        IN:
            id: Transfer UI id of transfer
            iconId: Icon Id for the given transfer
        -->
        <method name="setIcon">
            <arg name="id" type="s" direction="in"/>
            <arg name="iconId" type="s" direction="in"/>
        </method>

        <!-- *********** Error Cases *********** -->
        <!--
        Method "setRepairableError":
        Tell that transfer was failed
        Parameters:
        IN:
            id: Transfer UI id of transfer
            headerMsg: Localized short description what went wrong
            detailMsg: Localized longer description what went wrong
            actionName: Localized string which is displayed on the action button
            If ActionButton is selected errorRepairRequested signal is sent.
            Cancel signal is sent if user selects to cancel failed transfer.
        -->
        <method name="setRepairableError">
            <arg name="id" type="s" direction="in"/>
            <arg name="headerMsg" type="s" direction="in"/>
            <arg name="detailMsg" type="s" direction="in"/>
            <arg name="actionName" type="s" direction="in"/>
        </method>

        <!--
        Method "setNonRepairableError":
        Tell that transfer was failed
        Parameters:
        IN:
            id: Transfer UI id of transfer
            headerMsg: Localized short description what went wrong
            detailMsg: Localized longer description what went wrong
            Cancel signal is sent if user  selects to cancel failed transfer.
        -->
        <method name="setNonRepairableError">
            <arg name="id" type="s" direction="in"/>
            <arg name="headerMsg" type="s" direction="in"/>
            <arg name="detailMsg" type="s" direction="in"/>
        </method>

        <!--
        Method "showErrorDetails":
            method to display the error details when the notification
            is clicked from the home screen
            parameters:
            IN:
                id: Transfer UI id of transfer
        -->
        <method name="showErrorDetails">
            <arg name="id" type="s" direction="in"/>
        </method>

        <!-- ********** End of Error Cases ********** -->

        <!-- State changes -->
        <!--
        Method "pending":
        Move transfer to pending state
        Parameters:
        IN:
            id: Transfer UI id of transfer
            message: Localizated string shown to user to tell why transfer is
                     moved to pending state
        -->
        <method name="pending">
            <arg name="id" type="s"/>
            <arg name="message" type="s"/>
        </method>

        <!--
        Method "started":
        Move transfer to active state
        Parameters:
        IN:
            id: Transfer UI id of transfer
            done: How much of transfer is done. See setProgress method.
        -->
        <method name="started">
            <arg name="id" type="s"/>
            <arg name="done" type="d"/>
        </method>

		<!--
		Method "markCompleted":
		mark the transfer as completed. This function removes transfer from the
		transfer-ui. Completed transfers can be shown in the history list
		depeneding on the parameters set.
		Parameters:
		IN:
			id: Transfer UI if of transfer
			showInHistory: If this parameter is set to true, then the transfer
			is shown in the history list. Default value of this parameter is set
			to false, by default completed transfer will not be shown in history
			list. If showInHistory is set to false, transfer will be displayed
			for 2 secs with "Completed" message.
			replaceId: If showInHistory is set to false, this parameter has no
			effect. If replace Id is provided, then the transfer is replaced in
			the history list view for the given replaceId. If there is no
			transfer with the given replaceId, then the transfer is added to
			history list view. Default value is empty, transfers will be added
			into history list and not replaced.
		-->
		<method name="markCompleted">
			<arg name="id" type="s"/>
			<arg name="showInHistory" type="b"/>
			<arg name="replaceId" type="s"/>
		</method>


		<method name="markCompleted">
			<arg name="id" type="s"/>
			<arg name="showInHistory" type="b"/>
			<arg name="replaceId" type="s"/>
            <arg name="resultUri" type="s"/>
		</method>

        <!--
        Method "cancelled":
        Tell to TUI that transfer was cancelled
        Parameters:
        IN:
            id: Transfer UI id of transfer
        -->
        <method name="cancelled">
            <arg name="id" type="s"/>
        </method>

        <!--
        Method "cancelFailed":
        Tell to TUI that transfer cancel request failed
        Parameters:
        IN:
            id: Transfer UI id of transfer
            message: Message to show
        -->
        <method name="cancelFailed">
            <arg name="id" type="s"/>
            <arg name="message" type="s"/>
        </method>

        <!--
        Method "paused":
        Tell to TUI that transfer paused request was successfull.
        Parameters:
        IN:
            id: Transfer UI id of transfer
        -->
        <method name="paused">
            <arg name="id" type="s"/>
        </method>

        <!--
        Method "resumed":
        Tell to TUI that transfer resume request was successfull.
        Parameters:
        IN:
            id: Transfer UI id of transfer
        -->
        <method name="resumed">
            <arg name="id" type="s"/>
        </method>

        <!--
        Method "done":
        Tell to TUI that transfer was done successfully
        Parameters:
        IN:
            id: Transfer UI id of transfer
        -->
        <method name="done">
            <arg name="id" type="s"/>
        </method>

        <!--
        Method "done":
        Tell to TUI that transfer was done successfully
        Parameters:
        IN:
            id: Transfer UI id of transfer
			message: Message which will be displayed after completion
        -->
        <method name="done">
            <arg name="id" type="s"/>
            <arg name="message" type="s"/>
        </method>

        <!-- End State Changes -->

        <!--
        Method "showUi":
        Ask Transfer UI to show it's view
        -->
        <method name="showUI">
        </method>

        <!--
        Method "sendSummary":
        Ask Transfer UI to send summary of transfers it's following
        -->
        <method name="sendSummary">
        </method>

        <!--
        Method "setCanPause":
        Set If a transfer can pause
        Parameters:
        IN:
            id: Transfer UI id of transfer
            canPause: true if transfer can be paused else false
        -->
        <method name="setCanPause">
            <arg name="id" type="s" direction="in"/>
            <arg name="canPause" type="b" direction="in"/>
        </method>

        <!--
        Method "setTransferType":
        Set the type of the transfer
        Parameters:
        IN:
            id: Transfer UI id of transfer
            transferType: type of the transfer.
            TRANSFER_TYPES_UPLOAD
            TRANSFER_TYPES_DOWNLOAD
            TRANSFER_TYPES_SYNC
            refer TransferEnums.h enum TransferTypes
        -->
        <method name="setTransferType">
            <arg name="id" type="s" direction="in"/>
            <arg name="transferType" type="i" direction="in"/>
        </method>

        <!--
          Method "setThumbnailForFile"
          set thumbnail file for the transfer. transfer-ui try to resolve
          thumbnail for the give file. Resolving thumbnail is asyncronus call,
          any new setIcon function call or a new setThumbnailForFile function
          call will ignore this request. fileName should be tracker indexed.
          Parameters:
          IN:
              id: Transfer UI id of transfer
              fileName file name for which transfer-ui will fetch thumbnail from
              the thumbnailer
              mimeType file mime type used to fetch thumbnail from thumbnailer
        -->
        <method name="setThumbnailForFile">
            <arg name="id" type="s" direction="in"/>
            <arg name="fileName" type="s" direction="in"/>
            <arg name="mimeType" type="s" direction="in"/>
        </method>

        <!--
          Method "setCancelButtonText"
          set cancel button text for the details dialog and error dialog
          Parameters:
          IN:
            id: Transfer UI id of the transfer
            text: localized cancel text to display in details dialog and error
            dialog
        -->
        <method name="setCancelButtonText">
            <arg name="id" type="s" direction="in"/>
            <arg name="text" type="s" direction="in" />
        </method>

        <!--
        Method "setSendNow":
        Define if transfer can be sent immediately. This is not
          applicable for downloads. Default implementation is set to false. If
          send now is enabled, when user clicks on send now in TransferUI ,
          Signals Client::startTransfer / Transfer::start is emitted
        Parameters:
        IN:
          canSendNow: set if transfer can be sent immediately.
        -->
        <method name="setSendNow">
            <arg name="id" type="s" direction="in"/>
            <arg name="canSendNow" type="b" direction="in"/>
        </method>

        <!--
        Method "setTransferTypeString
           Set the transfer type string. This string will be displayed in
          title of transfer details dialog in transfer-ui.
          e.g. for bluethooth, if the transfer is from device , then the title
          can be "Send" , if the transfer is to device, then the title can be
          "Receive".
          Parameters:
          IN:
          title: title which will be displayed in the transfer details  dialog
        -->
        <method name="setTransferTypeString">
            <arg name="id" type="s" direction="in"/>
            <arg name="TypeString" type="s" direction="in"/>
        </method>

		<!--
		   Method setImageFromFile
		   Method set image from the given absolute filepath.
           Parameters:
		   IN:
           fileNamePath : absolute path of the file name from which Image
          will be loaded
		-->
		<method name="setImageFromFilePath">
			<arg name="id" type="s" direction="in"/>
			<arg name="filePath" type="s" direction="in"/>
		</method>

        <!--
           Method setValues
           Method set the parameters of a transfer. All the set functions can be
           grouped into a map and passed as the parameter. By this way
           dbus-trafic can be reduced. This method is used by libtuiclient
           commit feature.
           These are the keys which is supported in transfer-ui
           "setName" - set the transfer name. Value is type of QString
           "setSize" - set the transfer size. Value is type of qulonglong
           "setEstimate" - set the transfer estimate. Value is type of int
           "setMessage" - set the transfer Message. Value is type of QString
           "setTargetName" - set the transfer target. Value is type of QString
           "setFilesCount" - set total files count. Value is type of int
           "setCurrentFileIndex" - set current file index. Value is type if int
           "setThumbnailForFile" - set thumbnail for the transfer file. Value is
           type QStringList, with first QString as the fileName and second
           QString mimeType
           "setIcon" - set icon for the transfer. Value is type of QString
           "setCancelButtonText" - set custom cancel button text. Value is type
           of QString
           "setCanPause" - can the transfer be paused. Value is type of bool
           Note: These keys can change at any time.
           Parameters:
            IN:
               id: Transfer UI id of the transfer
               keyValues: QVariantMap of attribute and value
        -->
        <method name="setValues">
            <annotation name="com.trolltech.QtDBus.QtTypeName.In1" value="QVariantMap"/>
            <arg name="id" type="s" direction="in"/>
            <arg name="keyValues" type="a{sv}" direction="in"/>
        </method>


       <!--
           Method retrieveData
           Method get data of a given transfer at the given point of time.
           Data is represented in key value pair. This data is used in
           libtuiclient.
           These are key supported 
           "progress" - progress data of the transfer
           "bytes" - size of the transfer
           "estimate" - estimated completion time
           "currentFileIndex" - current transferring file index
           "totalFiles" - total files in the transfer
           "canPause" - can pause attribute
           "canSendImmediatly" - can send immediate attribute
           "name" - transfer name
           "message" - transfer message
           "errorInfo" - QStringList of error information. First string
           represents error header message, second string represents error
           details and the last one represents action string. 
           "thumbnailfile" QStringList of thumbnail information. Fisrt string
           represents the path of the thumbnail file and the second string
           represents the mime type of the file.
           "icon" transfer icon
           "imagePath" image file path , from which image is displayed in the
           transfer-ui.
           "target" transfer target
           "cancelButtonText" cancel button text
           "transferTitle" transfer title as in details view.
           "transferStatus" transfer status.
           Note: if the transfer id is not present or the transfer state is
           completed, an empty QVariantMap is returned.
           Parameters:
            IN:
               id: Transfer UI id of the transfer
            OUT:
               keyValues: QVariantMap of attribute and value
        -->
        <method name="retrieveData">
            <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="QVariantMap"/>
            <arg name="id" type="s" direction="in"/>
            <arg name="keyValues" type="a{sv}" direction="out"/>
        </method>

        <!--
        <Method clearCompletedTransfers
        Method clear completed transfers, this method is called from events
        plugin.
        -->
        <method name="clearCompletedTransfers">
        </method>


        <!-- === Signals to clients === -->
        <!--
         Signal : launched
         This signal is sent when the TUI is launched. The clients can connect
         to this signal, and send information about existing transfers when
         they recieve this signal. This signal is particularily used in the
         case where TUI crashed and was re-started.
         This signal has no parameters.
         -->
        <signal name="launched">
        </signal>

        <!--
        Signal "start":
        Signal send when user selects to start/continue transfer
        Parameters:
            id: Transfer UI id of transfer
        -->
        <signal name="start">
            <arg name="id" type="s"/>
        </signal>

        <!--
        Signal "pause":
        Signal send when user selects to pause transfer
        Parameters:
            id: Transfer UI id of transfer
        -->
        <signal name="pause">
            <arg name="id" type="s"/>
        </signal>

        <!--
        Signal "cancel":
        Signal send when user selects to cancel transfer
        Parameters:
            id: Transfer UI id of transfer
        -->
        <signal name="cancel">
            <arg name="id" type="s"/>
        </signal>

        <!--
        Signal "errorRepairRequested":
        Signal send when user selects to repair the error
        Parameters:
            id: Transfer UI id of transfer
        -->
        <signal name="errorRepairRequested">
            <arg name="id" type="s"/>
        </signal>

        <!--
        Signal "invalidID":
        Signal raised if methods are called with invalid id values
        Parameters:
            id: Transfer UI id of transfer
            message: Message for debug printing
        -->
        <signal name="invalidID">
            <arg name="id" type="s"/>
            <arg name="message" type="s"/>
        </signal>

        <!--
        Signal "summaryReport":
        Signal raised when number of transfer followed by Transfer UI is
        changed. Or when summary is requested.
        Parameters:
            failed: Number of failed transfers
            active: Number of active transfers
            pending: Number of pending transfers
            completed: Number of completed transfers
        -->
        <signal name="summaryReport">
            <arg name="failed" type="i"/>
            <arg name="active" type="i"/>
            <arg name="pending" type="i"/>
            <arg name="completed" type="i"/>
        </signal>

        <!--
        Signal "stateChanged":
        Signal to notify clients ( e.g. status-menu indicator ) the collective
        changes in the transfer items.
        Parameters:
            state : "idle" - when there no transfers in Transfer UI.
                    "live" - when there are transfers in Transfer UI. These
                    transfers can be on-going / pending.
                    "fail" - when there are one or more failed transfers. Even,
                    if there are on-going / pending transfer , if one or more
                    transfer is failed, then the state is "fail".
                    "pending" - transfers are in pending state (no active , no
					error , only pending transfers)
        -->
        <signal name="stateChanged">
            <arg name="state" type="s"/>
        </signal>

        <!--
        Signal tuiOpened
        Signal to notify clients that the transfer-ui opened and is in
        foreground (transfer-ui is visible to the user)
        -->
        <signal name="tuiOpened">
        </signal>

        <!--
        Signal tuiClosed
        Signal to notify clients that the transfer-ui is closed and running in
        background, user pressed close button while there are transfers
        -->
        <signal name="tuiClosed">
        </signal>

    </interface>
</node>

